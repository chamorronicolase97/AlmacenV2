@page "/productos"
@inject HttpClient Http

<h3 class="mb-4">Lista de Productos</h3>

@if (productos == null)
{
    <p>Cargando productos...</p>
}
else if (productos.Count == 0)
{
    <p>No se encontraron productos.</p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead class="thead-dark">
                <tr>
                    <th>ProductoID</th>
                    <th>Descripción</th>
                    <th>Costo Actual</th>
                    <th>Precio Venta Actual</th>
                    <th>Stock</th>
                    <th>Categoría</th>
                    <th>Proveedor</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var producto in productos)
                {
                    <tr>
                        <td>@producto.ProductoID</td>
                        <td>@producto.Descripcion</td>
                        <td>
                            @if (producto.IsEditingCosto)
                            {
                                <input @bind="producto.Costo" type="number" class="form-control" />
                            }
                            else
                            {
                                @producto.Costo
                            }
                        </td>
                        <td>@producto.ValorVenta</td>
                        <td>@producto.Stock</td>
                        <td>@producto.Categoria.Descripcion</td>
                        <td>@producto.Proveedor.RazonSocial</td>
                        <td class="d-flex justify-content-start align-items-center">
                            @if (!producto.IsEditingCosto)
                            {
                                <button class="btn btn-primary ms-2" @onclick="() => HabilitarEdicionCosto(producto)">
                                    <i class="fas fa-edit"></i> Modificar
                                </button>
                            }
                            else
                            {
                                <button class="btn btn-success ms-2" @onclick="() => GuardarCambios(producto)">
                                    <i class="fas fa-check"></i> Guardar
                                </button>
                                <button class="btn btn-danger ms-2" @onclick="() => CancelarEdicion(producto)">
                                    <i class="fas fa-times"></i> Cancelar
                                </button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private List<Entidades.Producto> productos;
    private Dictionary<int, decimal?> costosOriginales = new Dictionary<int, decimal?>(); 

    protected override async Task OnInitializedAsync()
    {
        await CargarProductos();
    }

    private async Task CargarProductos()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<List<Entidades.Producto>>("https://localhost:7173/api/producto");

            if (response != null)
            {
                productos = response;
                // Inicializar IsEditingCosto a false para todos los productos
                foreach (var producto in productos)
                {
                    producto.IsEditingCosto = false;
                    // Inicializar el costo original en el diccionario
                    if (!costosOriginales.ContainsKey(producto.ProductoID))
                    {
                        costosOriginales[producto.ProductoID] = producto.Costo;
                    }
                }
            }
            else
            {
                productos = new List<Entidades.Producto>();
            }
        }
        catch (Exception ex)
        {
            productos = new List<Entidades.Producto>();
            Console.Error.WriteLine($"Error al cargar productos: {ex.Message}");
        }
    }

    // Habilitar la edición del costo
    private void HabilitarEdicionCosto(Entidades.Producto producto)
    {
        producto.IsEditingCosto = true;
        // Guardar el costo original en el diccionario al habilitar la edición
        if (!costosOriginales.ContainsKey(producto.ProductoID))
        {
            costosOriginales[producto.ProductoID] = producto.Costo;
        }
    }

    // Guardar los cambios del costo
    private async Task GuardarCambios(Entidades.Producto producto)
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"https://localhost:7173/api/producto/{producto.ProductoID}", producto);

            if (response.IsSuccessStatusCode)
            {
                producto.IsEditingCosto = false; // Deshabilitar la edición
                await CargarProductos(); // Recargar los productos para reflejar el cambio
            }
            else
            {
                // Manejo de error, puedes mostrar un mensaje si lo deseas
                Console.Error.WriteLine("Error al guardar el costo.");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error al intentar guardar el costo: {ex.Message}");
        }
    }

   
    private void CancelarEdicion(Entidades.Producto producto)
    {
        if (costosOriginales.ContainsKey(producto.ProductoID))
        {
            producto.Costo = costosOriginales[producto.ProductoID] ?? 0; 
        }
        producto.IsEditingCosto = false; 
    }
}
